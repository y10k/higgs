#!/usr/local/bin/ruby

require 'higgs/utils/bman'
require 'optparse'

# for ident(1)
CVS_ID = '$Id$'

STDOUT.sync = true

COMMANDs = %w[
  online_backup
  index
  data
  rotate
  jlog
  recover
  verify
  clean_from
  clean_to
  restore
  restore_files
  restore_recover
  restore_verify
]

commands = %w[ online_backup ]
options = { :verbose => 0 }

opts = OptionParser.new
opts.banner = "Usage: #{opts.program_name} [OPTIONs] [COMMANDs]\n"
opts.banner << "COMMANDs:\n"
opts.banner << COMMANDs.map{|s| opts.summary_indent + s }.join("\n") << "\n"
opts.banner << "OPTIONs:\n"

opts.on('-f', '--from=BACKUP_TARGET_STORAGE', String) {|value|
  options[:from] = value
}
opts.on('-t', '--to-dir=DIR_TO_BACKUP', String) {|value|
  options[:to_dir] = value
}
opts.on('-n', '--to-name=NAME_TO_BACKUP', String) {|value|
  options[:to_name] = value
}
opts.on('-u', '--jlog-rotate-service-uri=URI', String) {|value|
  options[:jlog_rotate_service_uri] = value
}
opts.on('-v', '--verbose', '--[no-]verbose') {|value|
  if (value) then
    options[:verbose] += 1
  else
    options[:verbose] -= 1
  end
}
opts.on('--verbose-level=LEVEL', Integer) {|value|
  options[:verbose] = value
}
opts.parse!

unless (ARGV.empty?) then
  count = 0
  for cmd in ARGV
    unless (COMMANDs.include? cmd) then
      STDERR.puts "error: unknown command: #{cmd}"
      count += 1
    end
  end
  if (count > 0) then
    exit 1
  end
  commands = ARGV
end

bman = Higgs::Utils::BackupManager.new(options)
for cmd in commands
  unless (bman.public_methods(false).include? cmd) then
    raise "unknown command: #{cmd}"
  end
  bman.__send__(cmd)
end

# Local Variables:
# mode: Ruby
# indent-tabs-mode: nil
# End:
